---
description: 
globs: 
alwaysApply: false
---
# General Rules

## Your Role
- You are an expert PHP and CodeIgniter developer

## Rules and Guidelines

### Code Style and Structure:
- Write clean, readable code: code must be easy to read and follow. Use descriptive names for classes, methods, variables.
- Follow PSR standards: adopt PSR-12 for formatting, use consistent indentation, spacing, namespace declarations.
- Use MVC pattern: separate logic into Models, Views, Controllers. Keep controllers focused on routing and input; move business rules into models or services.
- Libraries and Helpers: place reusable code into custom libraries or helpers. Load them via autoload or within controllers.
- Services: extract complex operations into service classes under `app/Services` to maintain single responsibility.

### Naming Conventions:
- Controllers and Models: use StudlyCase (for example, `UserController`, `OrderModel`).
- Methods and Variables: use camelCase (for example, `calculateTotal`, `$orderItems`).
- View files: use lowercase hyphenated names (for example, `user-profile.php`).
- Directories: organize by feature or layer (for example, `app/Models`, `app/Controllers`, `app/Services`, `app/Views/orders`).

### CodeIgniter Features:
- Routes: define routes in `app/Config/Routes.php`. Group related routes and apply filters for authentication or other checks.
- Dependency Injection: inject models, services, or helpers into controllers via constructor or method type-hinting.
- Validation: use CodeIgniter’s Validation library in controllers or create custom rule sets in `app/Config/Validation.php`.
- Config and Environment: manage environment variables in `.env`. Configure settings via files in `app/Config`.
- Migrations and Seeders: maintain database schema with migrations in `app/Database/Migrations`. Populate test data with seeders in `app/Database/Seeds`.
- Entities and Models: use Entity classes under `app/Entities` for data objects. Define property casting and accessors in models under `app/Models`.
- Filters: apply filters for CSRF, authentication, or rate limiting by defining them in `app/Config/Filters.php` and assigning to routes.

### Security and Performance:
- SQL Safety: use CodeIgniter’s Query Builder or bound parameters to prevent injection attacks.
- XSS Protection: escape output with `esc()` in views. Enable global XSS filtering in `app/Config/Filters.php`.
- CSRF Protection: enable CSRF in `app/Config/Filters.php` and include `<?= csrf_field() ?>` in forms.
- Caching: leverage cache drivers defined in `app/Config/Cache.php` to store query results or rendered views.
- Autoloading: configure helpers, libraries, and models in `app/Config/Autoload.php` to load only what is needed.
- Profiling: use CodeIgniter’s built-in profiler during development to identify slow queries or performance bottlenecks.

### Testing:
- PHPUnit: write unit tests under `tests/Unit` and feature tests under `tests/Feature`.
- Factories and Seeders: use seeders in test setup to generate consistent data for tests.
- Mocking: isolate external dependencies with mocks or stubs when testing models or services.

### Tools and Automation:
- Spark Commands: use `php spark make:controller`, `make:model`, `make:migration`, and other built-in commands to scaffold components.
- Task Scheduling: set up cron jobs that invoke `php spark` CLI commands for routine tasks, such as clearing cache or running backups.
- Debugging: enable debug mode in `app/Config/Boot/development.php` to see detailed error messages during development.

## Source File Inventory:
- Before modifying code, reference the source file inventory in `/inventory.md`.
- Update the inventory file whenever files are added, removed, or modified.

## IMPORTANT:
- After changes are complete, update the memory bank.
- If you forget, user can type “docs” to prompt an update.
